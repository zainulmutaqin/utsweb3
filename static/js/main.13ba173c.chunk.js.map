{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","color","img","menu","setState","_this2","react_default","a","createElement","className","items","map","index","style","concat","onClick","clicked","bind","key","src","width","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.13ba173c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      name: 'Tuan Kreb',\n      color: 'Merah',\n      img: 'merah.png',\n    };\n  }\n\n/*\n  menusaya(){\n    return <img src={this.state.active+\".jpg\"} width=\"500\"></img>\n  }\n*/\n/*\n  menusaya(){\n    var gambar;\n    if(this.state.active.toLowerCase() === 'merah'){\n      gambar=\"merah\"; //sesuai nama file gambar\n    }else if(this.state.active.toLowerCase() === 'kuning'){\n      gambar=\"biru\";\n    }else if(this.state.active.toLowerCase() === 'hijau'){\n      gambar=\"hijau\";\n    }else if(this.state.active.toLowerCase() === 'kuning'){\n      gambar=\"biru\";\n    }\n\n    return <img src={this.state.active+\".jpg\"} width=\"500\"></img>\n  }\n*/\n\n  clicked (menu){\n    //untuk memperbarui state sesuai dengan menu yang dipilih\n    this.setState({\n      name: menu.name,\n      color: menu.color,\n      img: menu.img,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {/*map akan loop sebanyak menu yang di definisikan */}\n      {/*kemudian mengembalikan elemen <a/> */}\n      <nav className=\"nav\">{this.props.items.map((menu, index) => {\n          var style = 'menu';\n\n          if (this.state.color === menu.color) {\n            style = `${style} is-active`;\n          } \n\n        return <a className={style+\" \"+menu.color}\n        //bind untuk membuat 'menu' bisa dikirim ke fungsi 'clicked' \n        onClick={this.clicked.bind(this, menu)}\n        key={index}>\n          {menu.name}\n        </a>;\n        }) }\n        </nav>\n\n        <div className=\"info\">\n          <span className={\"selected \" + this.state.color}> {this.state.name}\n          </span><br></br><br></br>\n          {//this.menusaya()\n          \n          } \n\n          <img src={this.state.img} width=\"200\"></img>\n        </div>\n    </div>\n\n        \n    );\n  }   \n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Custom.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst items =[\n    {\n        name    : 'Tuan Kreb',\n        color   : 'Merah',\n        img     : 'merah.png',\n    },\n    {\n        name    : 'Spombob',\n        color   : 'Kuning',\n        img     : 'kuning.png',\n    },\n    {\n        name    : 'Plangton',\n        color   : 'Hijau',\n        img     : 'hijau.png',\n    },\n    {\n        name    : 'Squidwed',\n        color   : 'Biru',\n        img     : 'biru.png',\n    },\n];\n\n//const items = ['Merah', 'Kuning', 'Hijau', 'Biru']\n\nReactDOM.render(<App items={items}/>, document.getElementById('root'));\nserviceWorker.register();\n\n"],"sourceRoot":""}